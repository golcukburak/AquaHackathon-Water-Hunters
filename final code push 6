#include <Adafruit_Sensor.h>
//include library
#include <DHT.h>
//include library for DHT11
#include <DHT_U.h>
//include library for DHT11
#define wateringTime 10000 
#define waitingTime 16000
#define veryDry 800
#define Dry 600
#define normal 400
#define wet 200
#define sensorDampTo  A0
#define sensorDampT1  A1
#define sensorDampT2  A2
#define Heat_Damp  3 
//DHT11
#define DHTTYPE DHT11
#define engine  4
int led1 = 12;
//engine
int led2Damp = 11;
//Damp
int Damp; 
//intecer damp
int Damp2; 
//intecer damp 2
int Damp3; 
//intecer damp 3
DHT dht(Heat_Damp, DHTTYPE);
volatile int flow_frequency; 
// sensor pals
unsigned int l_hour; 
// litre / hour
unsigned char flowsensor = 2; 
// Define pin sensor 2
unsigned long currentTime;
unsigned long cloopTime;

void flow () // Interrupt
{
flow_frequency++;
}
void setup() {
   pinMode(led1, OUTPUT);
   //Setting to motor LED for output
  pinMode(led2Damp, OUTPUT);
  //Setting to DHT11 LED for output
 pinMode(flowsensor, INPUT);
 //Setting to flowsensor LED for input
 digitalWrite(flowsensor, HIGH);
 //Going to feed voltage of 5v to flowsensor
 Serial.begin(9600);
 //Opening to 9600 baudrate for serial Begin
 attachInterrupt(0, flow, RISING);
 //if the sensor water is passed, the sensor worked
 sei(); 
 //opening to Interrupt
 currentTime = millis();
 //Current time going to equal to millis
 cloopTime = currentTime;
 //Cloop time going to equal to Current time
 pinMode(engine, OUTPUT);
 // Setting engine to output
 pinMode(sensorDampTo, INPUT);
 //Setting damp sensor to input
 pinMode(sensorDampT1, INPUT);
 //Setting damp sensor to input
 pinMode(sensorDampT2, INPUT);
 //Setting damp sensor to input
 dht.begin();
}
void loop() {
  float Humidity = dht.readHumidity();
  //Humanity data to equal real data
  float Temperature = dht.readTemperature();
  //Temperature data to equal real data
    if (isnan(Humidity) || isnan( Temperature)) {
    Serial.println(F("Failed to read from DHT sensor!")); 
    return;
  }
  Serial.print(F("Humidity: "));
  //Writing to humanity text to serial print screen
  Serial.print(Humidity);
  //Writing to humanity data to serial print screen
  Serial.print(F("%  Temperature: "));
  //Writing to Temperature text to serial print screen
  Serial.println(Temperature); 
  //Writing to Temperature data to serial print screen
  if(Humidity>0){
     digitalWrite(led2Damp, HIGH);
     //led on 
     delay(3000); 
     // wait for 3 second
     digitalWrite(led2Damp, LOW); 
     //led off
  }
  while(Humidity>60){
    digitalWrite(engine,LOW);
    //engine off
    delay(10000);
    // wait for 10 second
    break;
  }
    while(Temperature>35){
      if(Humidity<40){
        digitalWrite(engine,HIGH);
        //engine on
          digitalWrite(led1, HIGH);
          //led on
        delay(wateringTime);
        // wait for 10 second
        digitalWrite(led1, LOW);
        //led off
        digitalWrite(engine,LOW);
        //engine off
        delay(waitingTime);
        //wait for 16 second
        currentTime = millis();
        // Count to the second of pals and calculate the litre - hours
        if(currentTime >= (cloopTime + 1000))
        {
        cloopTime = currentTime;
        // Update to second
        l_hour = (flow_frequency * 60 / 7.5); 
        // Calculateing litre and frequency
        flow_frequency = 0; 
        // Reset the frequency
        Serial.print(l_hour, DEC);
        // Write to the calculation to serial print
        Serial.println(" L/hour");
        break;
       } 
      }
      else{
         Damp2=analogRead(sensorDampT1);
         //Read the humanity sensor and going to equal to the damp sensor
          Serial.print("Damp2: ");
          //Writing Damp2 text to serial screen 
          Serial.println (Damp2);
          //Writing datas to serial screen 
           if(Damp2>veryDry){ 
           digitalWrite(engine,HIGH);
           //engine on
           digitalWrite(led1, HIGH); 
           //led on
           delay(wateringTime+3000);
           // wait for 13 second
           digitalWrite(led1, LOW); 
           //led off
           digitalWrite(engine,LOW);
           //engine off
           delay(waitingTime-10000);
           // wait for 6 second
           }
           else if(Damp2>Dry){
           digitalWrite(engine,HIGH);
           //engine on
           digitalWrite(led1, HIGH);
           //led on
           delay(wateringTime);
           // wait for 10 second
           digitalWrite(led1, LOW);
           //led off
           digitalWrite(engine,LOW);
           //engine off
           delay(waitingTime-6000);
           // wait for 10 second
           currentTime = millis();
           // Count to the second of pals and calculate the litre - hours
           if(currentTime >= (cloopTime + 1000))
           {
           cloopTime = currentTime; 
           // Update to second
           l_hour = (flow_frequency * 60 / 7.5); 
           // Calculateing litre and frequency
           flow_frequency = 0;
           // Reset the frequency
           Serial.print(l_hour, DEC); 
           // Write to the calculation to serial print
           Serial.println(" L/hour");
           } 
           }
           else if(Damp2>normal){
           digitalWrite(engine,HIGH);
           //engine on
           digitalWrite(led1, HIGH);
           //led on
           delay(wateringTime-3000);
           // wait for 7 second
           digitalWrite(led1, LOW);
           //led off
           digitalWrite(engine,LOW);
           //engine off
           delay(waitingTime);
           // wait for 16 second
           currentTime = millis();
           // Count to the second of pals and calculate the litre - hours
           if(currentTime >= (cloopTime + 1000))
           {
           cloopTime = currentTime; 
           // Update to second
           l_hour = (flow_frequency * 60 / 7.5); 
            // Calculateing litre and frequency
           flow_frequency = 0; 
           // Reset the frequency
           Serial.print(l_hour, DEC);
           // Write to the calculation to serial print
           Serial.println(" L/hour");
           } 
           }
           else if(Damp>wet){
           digitalWrite(engine,HIGH);
           //engine on
           digitalWrite(led1, HIGH);
           //led on
           delay(wateringTime-4000);
           // wait for 6 second
           digitalWrite(led1, LOW);
           //led off
           digitalWrite(engine,LOW);
           //engine off
           delay(waitingTime+16000);
           // wait for 32 second
               currentTime = millis();
               // Count to the second of pals and calculate the litre - hours
              if(currentTime >= (cloopTime + 1000))
              {
              cloopTime = currentTime; 
              // Update to second
              l_hour = (flow_frequency * 60 / 7.5);
               // Calculateing litre and frequency
              flow_frequency = 0; 
              // Reset the frequency
              Serial.print(l_hour, DEC); 
              // Write to the calculation to serial print
             Serial.println(" L/hour");
            } 
           }
        break;
      
      }
    }
    while(Temperature<0){
      if(Humidity>=45){
          digitalWrite(engine,LOW);
          //engine off
          digitalWrite(led1, LOW);
          //led off
          delay(10000);
          // wait for 10 second
          break; 
      }
      else{
         Damp3=analogRead(sensorDampT2);
         //Read the humanity sensor and going to equal to the damp sensor
          Serial.print("Damp3: ");
          //Writing Damp3 text to serial screen 
          Serial.println (Damp3);
          //Writing datas to serial screen 
           if(Damp>veryDry){ 
         digitalWrite(engine,HIGH);
         //engine on
         digitalWrite(led1, HIGH);
         //led on
         delay(wateringTime+3000);
         // wait for 13 second
         digitalWrite(led1, LOW);
         //led off
         digitalWrite(engine,LOW);
         //engine off
         delay(waitingTime-10000);
         // wait for 6 second
        currentTime = millis();
         // Count to the second of pals and calculate the litre - hours
       if(currentTime >= (cloopTime + 1000))
       {
       cloopTime = currentTime; 
       // Update to second
       l_hour = (flow_frequency * 60 / 7.5); 
       // Calculateing litre and frequency
       flow_frequency = 0; 
       // Reset the frequency
       Serial.print(l_hour, DEC); 
       // Write to the calculation to serial print
       Serial.println(" L/hour");
       } 
         }
           else if(Damp>Dry){
        digitalWrite(engine,HIGH);
        //engine on
        digitalWrite(led1, HIGH);
        //led on
        delay(wateringTime);
        // wait for 10 second
        digitalWrite(led1, LOW);
        //led off
        digitalWrite(engine,LOW);
        //engine off
        delay(waitingTime-6000);
        // wait for 10 second
           currentTime = millis();
        // Count to the second of pals and calculate the litre - hours
       if(currentTime >= (cloopTime + 1000))
       {
       cloopTime = currentTime;
       // Update to second
       l_hour = (flow_frequency * 60 / 7.5);
       // Calculateing litre and frequency
       flow_frequency = 0; 
       // Reset the frequency
       Serial.print(l_hour, DEC); 
       // Write to the calculation to serial print
       Serial.println(" L/hour");
       } 
       }
        else if(Damp>normal){
        digitalWrite(engine,HIGH);
        //engine on
        digitalWrite(led1, HIGH);
        //led on
        delay(wateringTime-3000);
        // wait for 7 second
        digitalWrite(led1, LOW);
        //led off
        digitalWrite(engine,LOW);
        //engine off
        delay(waitingTime);
        //wait for 16 second
           currentTime = millis();
        // Count to the second of pals and calculate the litre - hours
       if(currentTime >= (cloopTime + 1000))
       {
       cloopTime = currentTime;
       // Update to second
       l_hour = (flow_frequency * 60 / 7.5);
       // Calculateing litre and frequency
       flow_frequency = 0; 
       // Reset the frequency
       Serial.print(l_hour, DEC); 
       // Write to the calculation to serial print
       Serial.println(" L/hour");
       } 
      }
         else if(Damp>wet){
        digitalWrite(engine,HIGH);
        //engine on
        digitalWrite(led1, HIGH);
        //led on
        delay(wateringTime-4000);
        // wait for 6 second
        digitalWrite(led1, LOW);
        //led off
        digitalWrite(engine,LOW);
        //engine off
        delay(waitingTime+16000);
        // wait for 32 second
           currentTime = millis();
        // Count to the second of pals and calculate the litre - hours
       if(currentTime >= (cloopTime + 1000))
       {
       cloopTime = currentTime;
       // Update to second
       l_hour = (flow_frequency * 60 / 7.5);
       // Calculateing litre and frequency
       flow_frequency = 0; 
       // Reset the frequency
       Serial.print(l_hour, DEC); 
       // Write to the calculation to serial print
       Serial.println(" L/hour");
       } 
       }
     
     }
    }
  Damp=analogRead(sensorDampTo);
  //Read the humanity sensor and going to equal to the damp sensor
  Serial.print("Damp: ");
  Serial.println (Damp);
  //Writing datas to serial screen 
  if(Damp>veryDry){ 
    digitalWrite(engine,HIGH);
    //engine on
    digitalWrite(led1, HIGH);
    //led on
    delay(wateringTime-1000);
    // wait for 9 second
    digitalWrite(led1, LOW);
    //led off
    digitalWrite(engine,LOW);
    //engine off
    delay(waitingTime-10000);
    // wait for 6 second
           currentTime = millis();
        // Count to the second of pals and calculate the litre - hours
       if(currentTime >= (cloopTime + 1000))
       {
       cloopTime = currentTime;
       // Update to second
       l_hour = (flow_frequency * 60 / 7.5);
       // Calculateing litre and frequency
       flow_frequency = 0; 
       // Reset the frequency
       Serial.print(l_hour, DEC); 
       // Write to the calculation to serial print
       Serial.println(" L/hour");
       } 
  }
  else if(Damp>Dry){
        digitalWrite(engine,HIGH);
        //engine on
        digitalWrite(led1,HIGH);
        //led on
        delay(wateringTime);
        // wait for 10 second
        digitalWrite(led1, LOW);
        //led off
        digitalWrite(engine,LOW);
        //engine off
        delay(waitingTime-6000);
        // wait for 10 second
           currentTime = millis();
        // Count to the second of pals and calculate the litre - hours
       if(currentTime >= (cloopTime + 1000))
       {
       cloopTime = currentTime;
       // Update to second
       l_hour = (flow_frequency * 60 / 7.5);
       // Calculateing litre and frequency
       flow_frequency = 0; 
       // Reset the frequency
       Serial.print(l_hour, DEC); 
       // Write to the calculation to serial print
       Serial.println(" L/hour");
       }  
  }
    else if(Damp>normal){
        digitalWrite(engine,HIGH);
        //engine on
        digitalWrite(led1, HIGH);
        //led on
        delay(wateringTime-3000);
        // wait for 7 second
        digitalWrite(led1, LOW);
        //led off
        digitalWrite(engine,LOW);
        //engine off
        delay(waitingTime);
        //wait for 16 second
           currentTime = millis();
        // Count to the second of pals and calculate the litre - hours
       if(currentTime >= (cloopTime + 1000))
       {
       cloopTime = currentTime;
       // Update to second
       l_hour = (flow_frequency * 60 / 7.5);
       // Calculateing litre and frequency
       flow_frequency = 0; 
       // Reset the frequency
       Serial.print(l_hour, DEC); 
       // Write to the calculation to serial print
       Serial.println(" L/hour");
       }  
  }
      else if(Damp>wet){
        digitalWrite(engine,HIGH);
        //engine on
        digitalWrite(led1, HIGH);
        //led on
        delay(wateringTime-4000);
        // wait for 6 second
        digitalWrite(led1, LOW);
        //led off
        digitalWrite(engine,LOW);
        //engine off
        delay(waitingTime+16000);
        // wait for 32 second
           currentTime = millis();
        // Count to the second of pals and calculate the litre - hours
       if(currentTime >= (cloopTime + 1000))
       {
       cloopTime = currentTime;
       // Update to second
       l_hour = (flow_frequency * 60 / 7.5);
       // Calculateing litre and frequency
       flow_frequency = 0; 
       // Reset the frequency
       Serial.print(l_hour, DEC); 
       // Write to the calculation to serial print
       Serial.println(" L/hour");
       } 
  }
}
//burak gölcük-ilkin qurbanlı
